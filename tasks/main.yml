---
# This role needs following input variables to properly work.
#
# Input:
#
# Required
#   openstack_server_ssh_name: SSH keypair name for Openstack
#   openstack_server_key_path: Local path to public key
#   openstack_server_name: Server name name
#   openstack_server_image: Glance image name/uuid
#   openstack_server_network: OS network name to boot server in
#
# Optional:
#   openstack_server_flavor:
#   openstack_server_num_of_instances:
#   openstack_server_host_groups: Groups to add server to, comma separated
#   openstack_server_wait_for_ssh:
#   openstack_server_wait_seconds:
#   openstack_server_user:
#   openstack_server_az:
#   openstack_server_group_name:
#   openstack_server_group_policies:
#
# Output:
# openstack_server_host: Is returned array from os_server

- name: Check for any missing arguments
  assert:
    that:
      - openstack_server_name is defined
      - openstack_server_ssh_name is defined
      - openstack_server_key_path is defined
      - openstack_server_image is defined
      - openstack_server_az is defined
      - openstack_server_network_ports is defined or openstack_server_network is defined

- name: Create keypair
  os_keypair:
    cloud: "{{ openstack_cloud | default(omit) }}"
    auth: "{{ openstack_auth | default(omit) }}"
    verify: "{{ openstack_ssl_verify | default(true) }}"
    name: "{{ openstack_server_ssh_name }}"
    public_key: "{{ lookup('file', '{{ openstack_server_key_path }}') }}"
    state: present

- name: Create Openstack Ports
  os_port:
    cloud: "{{ openstack_cloud | default(omit) }}"
    network: "{{ item.network }}"
    name: "{{ openstack_server_name }}-port-{{ item.name }}"
    state: present
  when: openstack_server_network_ports is defined and openstack_server_network_ports|length > 0
  with_items:
    - "{{ openstack_server_network_ports }}"
  register: _os_ports

- set_fact: _os_server_port_ids="{{ _os_ports.results | map('json_query', '{"port-id":port.id}') | list }}"
  when: _os_ports.results is defined
- set_fact: _os_server_net_name="{{ [{"net-name":openstack_server_network}] }}"
  when: openstack_server_network is defined

- name: Create server groups
  os_server_group:
    cloud: "{{ openstack_cloud | default(omit) }}"
    auth: "{{ openstack_auth | default(omit) }}"
    verify: "{{ openstack_ssl_verify | default(true) }}"
    name: "{{ openstack_server_group_name }}"
    policies: "{{ openstack_server_group_policies }}"
    state: present
  when: openstack_server_group_name is defined and openstack_server_group_name|length > 0
  register: _os_server_group

- set_fact:
    _os_server_group_id:
      group: "{{ _os_server_group.id }}"
  when: _os_server_group.id is defined

- name: Launch instances
  os_server:
    cloud: "{{ openstack_cloud | default(omit) }}"
    auth: "{{ openstack_auth | default(omit) }}"
    verify: "{{ openstack_ssl_verify | default(true) }}"
    name: "{{ openstack_server_name }}"
    availability_zone: "{{ openstack_server_az }}"
    flavor: "{{ openstack_server_flavor }}"
    image: "{{ openstack_server_image }}"
    key_name: "{{ openstack_server_ssh_name }}"
    security_groups: "{{ openstack_server_security_group | default('internal') }}"
    nics: "{{ _os_server_net_name|default([]) + _os_server_port_ids|default([]) }}"
    scheduler_hints: "{{ _os_server_group_id | default({}) }}"
    state: present
    timeout: "{{ openstack_server_timeout }}"
    wait: "{{ openstack_server_wait }}"
    auto_ip: "{{ openstack_server_auto_ip }}"
    meta:
      groups: "{{ openstack_server_host_groups }}"
  register: openstack_server_host

- debug: var=openstack_server_host

#
# ansible_ssh_private_key_file will set key path used to ssh into a host.
#
- name: Add created hosts into groups
  add_host:
    hostname: '{{ openstack_server_host.openstack.name }}'
    ansible_hostname: '{{ openstack_server_host.openstack.name }}'
    ansible_ssh_host: '{{ openstack_server_host.openstack.interface_ip or openstack_server_host.openstack.private_v4 }}'
    ansible_ssh_port: 22
    ansible_ssh_user: "{{ openstack_server_user }}"
    ansible_ssh_private_key_file: "{{ openstack_server_ssh_private_key_file }}"
    ansible_python_interpreter: '{{ openstack_server_ansible_python }}'
    inventory_dir: '{{ inventory_dir }}'
    groups: '{{ openstack_server_host_groups }}'
  register: _inventory_host
  when:
    - openstack_server_host_groups is defined
    - not ansible_check_mode

- debug: var=_inventory_host

- name: Wait for servers
  wait_for:
    host: "{{ openstack_server_host.openstack.accessIPv4 }}"
    port: 22
    timeout: "{{ openstack_server_wait_ssh_timeout }}"
    search_regex: OpenSSH
  when:
    - openstack_server_wait_for_ssh
    - not ansible_check_mode

- name: Wait for servers fixed time
  pause:
    seconds: "{{ openstack_server_wait_seconds | int }}"
  when:
    - openstack_server_wait_seconds is defined
    - not ansible_check_mode
